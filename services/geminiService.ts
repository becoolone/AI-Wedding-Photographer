import { GoogleGenAI, Modality } from "@google/genai";
import type { Part } from "@google/genai";

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

const generatePrompt = (style: string, customStyle: string): string => {
  const basePrompt = `
    You are an expert AI wedding photographer. Your task is to merge the two people from the provided images into a single, new, photorealistic, and cinematic wedding photograph.
    
    **Instructions:**
    1.  **Combine Subjects:** Naturally integrate the man and woman into one cohesive image.
    2.  **Preserve Identity:** Maintain their facial features and likeness accurately. Adjust their poses to be romantic and fitting for a wedding photo, but keep their body proportions realistic.
    3.  **Wedding Attire:** Dress the man in a stylish, modern suit or tuxedo and the woman in an elegant, beautiful wedding gown. The style of the attire should match the chosen venue.
    4.  **Create Scene:** Place the couple in the following wedding scene:
  `;

  let sceneDescription = "";
  switch (style) {
    case 'Castle Ballroom':
      sceneDescription = "An elegant, grand castle ballroom with high ceilings, ornate chandeliers casting warm ambient light, polished floors, and luxurious decorations.";
      break;
    case 'Beach':
      sceneDescription = "A serene, sandy beach at sunset. The lighting should be soft, warm, and golden, with the sun low on the horizon over the ocean.";
      break;
    case 'Garden':
      sceneDescription = "A lush, vibrant garden filled with blooming flowers and greenery. Place them under a beautiful wedding arch, with daylight filtering softly through the trees.";
      break;
    case 'Luxury Hotel':
      sceneDescription = "The chic, modern interior of a luxury hotel or event space. Use sophisticated evening ambient lighting to create a classy, high-end atmosphere.";
      break;
    case 'Boho Outdoor':
      sceneDescription = "A rustic, bohemian outdoor setting like a meadow or forest. The scene should be filled with soft, natural sunlight, and the couple's attire should have a relaxed, boho-chic feel.";
      break;
    case 'Custom Venue':
      sceneDescription = customStyle;
      break;
    default:
      sceneDescription = "A beautiful, generic wedding background.";
  }

  const closingPrompt = `
    5.  **Creative Freedom & Variety (VERY IMPORTANT):** Every time you generate an image, you MUST introduce significant variations. Do not produce similar images on subsequent requests.
        *   **Pose:** Create a new, unique, and romantic pose. Do not repeat poses.
        *   **Attire:** Design completely different, stylish, and unique wedding attire (dress and suit) for each generation.
        *   **Composition & Angle:** Radically change the photographic composition. **Prioritize close-up shots (about 60% of the time)** and ensure the **couple is looking towards the camera (about 80% of the time)**. Also vary camera angle and framing (e.g., close-up, medium shot, portrait, wide shot).
        *   **Background Details:** Even within the selected venue style, alter the specific background elements to make each scene feel unique.

    6.  **Realism:** Ensure the final image has realistic lighting, shadows, and perspective. The couple must look like they are naturally part of the scene.
    7.  **Quality:** The output should be a high-resolution, cinematic, and emotionally resonant photograph. Do not add any text, watermarks, or other artifacts. Only output the image.
    8.  **Internal Request ID (ignore for image content):** ${Date.now()}
  `;

  return `${basePrompt} "${sceneDescription}" ${closingPrompt}`;
};


export const generateWeddingImage = async (
  manImage: { mimeType: string; data: string },
  womanImage: { mimeType: string; data: string },
  style: string,
  customStyle: string
): Promise<string> => {
    
  const prompt = generatePrompt(style, customStyle);
  
  const manImagePart: Part = {
    inlineData: {
      mimeType: manImage.mimeType,
      data: manImage.data,
    },
  };
  
  const womanImagePart: Part = {
    inlineData: {
      mimeType: womanImage.mimeType,
      data: womanImage.data,
    },
  };
  
  const textPart: Part = {
    text: prompt,
  };
  
  const response = await ai.models.generateContent({
    model: 'gemini-2.5-flash-image-preview',
    contents: {
      parts: [manImagePart, womanImagePart, textPart],
    },
    config: {
        responseModalities: [Modality.IMAGE, Modality.TEXT],
    },
  });

  for (const part of response.candidates[0].content.parts) {
    if (part.inlineData) {
      // Return a data URL for direct use in <img> src
      return `data:${part.inlineData.mimeType};base64,${part.inlineData.data}`;
    }
  }

  throw new Error("No image was generated by the AI. The model may have refused the request due to safety policies. Please try with different images.");
};